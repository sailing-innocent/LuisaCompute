name: build-cmake

on: [ push, pull_request ]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu ]
        compiler:
          - { name: gcc, version: 13 }
          - { name: clang, version: 17 }
        config: [ Release, Debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler.name }}-${{ matrix.compiler.version }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          if [ "${{ matrix.compiler.name }}" = "gcc" ]; then
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get -y install gcc-${{ matrix.compiler.version }} g++-${{ matrix.compiler.version }}
          else
            wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
            sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${{ matrix.compiler.version }} main"
            sudo apt-get -y remove "libc++1-*" "libc++abi1-*" "libunwind-*"
            sudo apt-get update
            sudo apt-get -y install clang-${{ matrix.compiler.version }} lld-${{ matrix.compiler.version }}
            sudo apt-get -y install libc++-${{ matrix.compiler.version }}-dev libc++abi-${{ matrix.compiler.version }}-dev
          fi
          sudo apt-get update
          sudo apt-get -y install build-essential cmake ninja-build uuid-dev libxinerama-dev libxcursor-dev libxi-dev libvulkan-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: "Setup CUDA"
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda
      - name: "Setup Vulkan SDK"
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler.name }}" = "gcc" ]; then
            export LUISA_CC=gcc-${{ matrix.compiler.version }}
            export LUISA_CXX=g++-${{ matrix.compiler.version }}
            export LUISA_FLAGS=""
          else
            export LUISA_CC=clang-${{ matrix.compiler.version }}
            export LUISA_CXX=clang++-${{ matrix.compiler.version }}
            export LUISA_FLAGS="-stdlib=libc++"
          fi
          cmake -S . -B build -G Ninja -D LUISA_COMPUTE_ENABLE_RUST=OFF -D LUISA_COMPUTE_ENABLE_REMOTE=OFF -D LUISA_COMPUTE_ENABLE_CPU=OFF -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=${LUISA_CC} -D CMAKE_CXX_COMPILER=${LUISA_CXX} -D CMAKE_CXX_FLAGS="${LUISA_FLAGS}"
          cmake --build build -j 16
      - name: "Install"
        run: |
          if [ "${{ matrix.config }}" = "Release" ]; then
            cmake --install build --prefix dist -v
          fi

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos ]
        compiler: [ homebrew-clang ] # , system-clang
        config: [ Release, Debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: [ self-hosted, macos, arm64 ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler }}" = "homebrew-clang" ]; then
            export CC=/opt/homebrew/opt/llvm/bin/clang
            export CXX=/opt/homebrew/opt/llvm/bin/clang++
          fi
          cmake -S . -B build -G Ninja -D LUISA_COMPUTE_ENABLE_RUST=OFF -D LUISA_COMPUTE_ENABLE_REMOTE=OFF -D LUISA_COMPUTE_ENABLE_CPU=OFF -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D LUISA_COMPUTE_ENABLE_UNITY_BUILD=OFF
          cmake --build build -v
      - name: "Install"
        run: |
          if [ "${{ matrix.config }}" = "Release" ]; then
            cmake --install build --prefix dist -v
          fi

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [ 2022 ]
        config: [ Release, Debug ]
        compiler: [ cl, clang, clang-cl ]
    name: windows / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: [ self-hosted, windows, x64 ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Setup Ninja"
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.11.1
      - name: "Configure and Build"
        shell: cmd
        run: |
          cmake -D COMPONENTS="dx" -D OUTPUT_DIR="../../luisa_compute_sdks/windows-cmake" -P scripts/download_sdks.cmake
          call "C:\Program Files\Microsoft Visual Studio\${{ matrix.os }}\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake --version
          ninja --version
          IF "${{ matrix.compiler }}" == "clang" (
            set CC=clang
            set CXX=clang++
          ) ELSE (
            set CC=${{ matrix.compiler }}
            set CXX=${{ matrix.compiler }}
          )
          cmake -S . -G Ninja -B build -D LUISA_COMPUTE_ENABLE_RUST=OFF -D LUISA_COMPUTE_ENABLE_REMOTE=OFF -D LUISA_COMPUTE_ENABLE_CPU=OFF -D CMAKE_BUILD_TYPE=${{ matrix.config }}
          cmake --build build -v
      - name: "Install"
        run: |
          cmake --install build --prefix dist -v
